if(process.env.NODE_ENV != "production"){
    require('dotenv').config()
}

const express = require('express');
const app = express();
const mongoose = require('mongoose');
const Listing = require('./models/listing');
const path = require('path');
const ejsMate = require('ejs-mate')
const session = require("express-session");
const MongoStore = require("connect-mongo")
const flash = require('connect-flash');
const passport = require("passport");
const LocalStrategy = require("passport-local");
const User = require("./models/user.js");
const MONGO_URL = process.env.ATLASDB;

const store =MongoStore.create({
    mongoUrl:MONGO_URL,
    crypto:{
        secret:process.env.SECRET,
    },
    touchAfter:24*3600
})
store.on("erron", ()=>{
    console.log("erron in mongo store");
})
const sessionOption = {
    store,
    secret:process.env.SECRETE,
    resave:false,
    saveUninitialized:true,
    cookie:{
       expires: Date.now() + 7 * 24 * 60 *60 *1000,
       maxAge: 7 * 24 * 60 *60 *1000,
       httpOnly: true
    }
}


app.use(session(sessionOption));
app.use(flash());

app.use(passport.initialize());//passport will be initialize for ever request
app.use(passport.session());//user not to require login for every requests

passport.use(new LocalStrategy(User.authenticate()))
// sets up Passport to use the LocalStrategy for authentication.
// LocalStrategy requires a verify callback function that receives the username and password submitted by the user
// User.authenticate() is a method provided by passport-local-mongoose 
// that checks if the provided username and password match a user in the database.

passport.serializeUser(User.serializeUser());
// passport-local-mongoose, the serializeUser() method is generated by the library 
// and is used to determine which data of the user object should be stored in the session
passport.deserializeUser(User.deserializeUser());
// retrieve the user object from the session


app.engine('ejs', ejsMate);

const methodOverride= require('method-override');
const expressError = require("./utils/expressError");
const { deserialize } = require('v8');

const listingsRouter = require("./routes/listing.js")
const reviewsRouter = require("./routes/reviews.js")
const userRouter = require("./routes/user.js");


//connecting Database
main().then(()=>{
    console.log("connected to mongo DB");
}).catch((err)=>{
    console.log(err);
})

async function main(){
    await mongoose.connect(MONGO_URL);
}

app.use(express.urlencoded({extended:true}))
app.use(methodOverride("_method"));

app.set("view engine","ejs");
app.set("views",path.join(__dirname,"views"));
app.use(express.static(path.join(__dirname,"/public")))

app.use((req,res,next)=>{
    res.locals.success = req.flash("success");
    res.locals.error = req.flash("error");
    res.locals.currentUser = req.user;
    next();
})

app.use("/listings",listingsRouter)
app.use("/listings/:id/reviews",reviewsRouter)
app.use("/",userRouter)




app.get('/',async(req,res)=>{
    // res.render('test')
    let allListing = await Listing.find({});
    res.render('listings/index',{allListing})
})

app.get("/demoUser",async (req,res)=>{
    let fakeUser = new User({
        email:"random@gmail.com",
        username:"shaurya",
    })

    let registeredUser = await User.register(fakeUser,"helloworld!")
    res.send(registeredUser);
})
// -----------------------------reviews


//TESTING ROUTS-----------------------------------------------------
app.get('/allListings',async (req,res)=>{
    res.json(await Listing.find({}));
})
app.get('/allReviews',async (req,res)=>{
    res.json(await Review.find({}));
})
// error handller---------------------------------
app.all('*',(req,res,next)=>{
    next(new expressError(404,"page not found"));
})
app.use((err,req,res,next)=>{
    let {statusCode = 500,message = "internal server error"} = err;
    // console.log(statusCode,message);
    res.status(statusCode).render("error.ejs",{err})
    // res.status(statusCode).send(message);
})

app.listen(8080,()=>{
    console.log("server is started at port 8080");
})